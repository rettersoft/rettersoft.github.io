"use strict";(self.webpackChunkrbs_dev_docs=self.webpackChunkrbs_dev_docs||[]).push([[3306],{3905:function(t,e,a){a.d(e,{Zo:function(){return u},kt:function(){return k}});var n=a(7294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var s=n.createContext({}),p=function(t){var e=n.useContext(s),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},u=function(t){var e=p(t.components);return n.createElement(s.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},m=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,l=t.originalType,s=t.parentName,u=o(t,["components","mdxType","originalType","parentName"]),m=p(a),k=r,c=m["".concat(s,".").concat(k)]||m[k]||d[k]||l;return a?n.createElement(c,i(i({ref:e},u),{},{components:a})):n.createElement(c,i({ref:e},u))}));function k(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=a.length,i=new Array(l);i[0]=m;var o={};for(var s in e)hasOwnProperty.call(e,s)&&(o[s]=e[s]);o.originalType=t,o.mdxType="string"==typeof t?t:r,i[1]=o;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5992:function(t,e,a){a.r(e),a.d(e,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return u},default:function(){return m}});var n=a(7462),r=a(3366),l=(a(7294),a(3905)),i=["components"],o={sidebar_position:3},s="Components",p={unversionedId:"process-manager/components",id:"process-manager/components",isDocsHomePage:!1,title:"Components",description:"As we mentioned earlier, a process is a collection of steps.",source:"@site/docs/process-manager/components.mdx",sourceDirName:"process-manager",slug:"/process-manager/components",permalink:"/docs/process-manager/components",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/process-manager/components.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Inputs & Outputs",permalink:"/docs/process-manager/in-out"},next:{title:"Best Practices",permalink:"/docs/process-manager/best-practices"}},u=[{value:"Simple Steps",id:"simple-steps",children:[{value:"Common Attributes",id:"common-attributes",children:[],level:3},{value:"Simple Step Examples",id:"simple-step-examples",children:[],level:3},{value:"Database (CoDB)",id:"database-codb",children:[{value:"Put Document",id:"put-document",children:[],level:4},{value:"Get Document",id:"get-document",children:[],level:4},{value:"List Documents",id:"list-documents",children:[],level:4},{value:"Delete Document",id:"delete-document",children:[],level:4}],level:3},{value:"Working With RBS Services",id:"working-with-rbs-services",children:[{value:"Synchronous Service Call",id:"synchronous-service-call",children:[],level:4},{value:"Asynchronous Service Call",id:"asynchronous-service-call",children:[],level:4}],level:3},{value:"Working With Other Processes",id:"working-with-other-processes",children:[],level:3},{value:"Native Code Support",id:"native-code-support",children:[{value:"SelectTransform",id:"selecttransform",children:[],level:4},{value:"Javascript",id:"javascript",children:[],level:4},{value:"Javascript with AWS SDK Support",id:"javascript-with-aws-sdk-support",children:[],level:4}],level:3},{value:"Third Party Libraries",id:"third-party-libraries",children:[{value:"Working with Dates",id:"working-with-dates",children:[],level:4},{value:"Validation Support",id:"validation-support",children:[],level:4},{value:"Multi Factor Authentication",id:"multi-factor-authentication",children:[],level:4},{value:"Public File Storage",id:"public-file-storage",children:[],level:4}],level:3}],level:2}],d={toc:u};function m(t){var e=t.components,a=(0,r.Z)(t,i);return(0,l.kt)("wrapper",(0,n.Z)({},d,a,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"components"},"Components"),(0,l.kt)("p",null,"As we mentioned earlier, a process is a collection of steps.\nYou can equip those steps up with certain attributes to make them components."),(0,l.kt)("p",null,"Process Manager supports various components to accomplish any kind of customization tasks in a project.\nYou can use these components to solve a problem within your business logic via a process."),(0,l.kt)("h2",{id:"simple-steps"},"Simple Steps"),(0,l.kt)("p",null,'Simple steps should have only common attributes such as "id", "skip", "state", etc.\nYou can use them for manipulating state data or declaring an error step.'),(0,l.kt)("h3",{id:"common-attributes"},"Common Attributes"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"interface Model {\n    id: string\n    state?: {}\n    userState?: { uid: string, data: {} }\n    response?: {}\n    info1?: string\n    info2?: string\n    info3?: string\n    error?: string\n    skip?: boolean\n    persist?: boolean\n    flush?: boolean\n    first?: boolean\n}\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Attribute Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Must"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"Unique Step ID.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"state"),(0,l.kt)("td",{parentName:"tr",align:null},"object"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Manipulates execution state. Must be a valid JSON.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"userState"),(0,l.kt)("td",{parentName:"tr",align:null},"object"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Manipulates user-based state. Stores data by user id. Users can access only their own data via their valid access token.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"error"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Custom error string. If ",(0,l.kt)("em",{parentName:"td"},"error")," is defined in earlier steps, you can't overwrite it with this parameter. You should use ",(0,l.kt)("em",{parentName:"td"},"state")," instead.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"response ",(0,l.kt)("inlineCode",{parentName:"td"},"*")),(0,l.kt)("td",{parentName:"tr",align:null},"object"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Path to final result. This will be the output.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"info","[","1-3","]"," ",(0,l.kt)("inlineCode",{parentName:"td"},"**")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Extra information to analyze in process mining.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"flush"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Flag to ignore saving execution data into storage. It decreases storage operations.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"persist"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Flag to re-enable saving execution data into storage. Use this flag to persist your data when ",(0,l.kt)("em",{parentName:"td"},"flush")," is enabled. It increases storage operations.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"first"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Flag to overwrite starting step.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"skip"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Flag to ignore step.")))),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"In other component steps, you can use common attributes too.")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("inlineCode",{parentName:"p"},"*")," ",(0,l.kt)("em",{parentName:"p"},"There are a few ways to return data back to the client that starts the process such as inputPath, parameters and response."))),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("inlineCode",{parentName:"p"},"**")," ",(0,l.kt)("em",{parentName:"p"},"Process mining covers pre-defined attributes such as processId, executionId, stepId, etc. With these info parameters, you can pass 3 more data to process mining data pool: info1, info2 and info3."))),(0,l.kt)("h3",{id:"simple-step-examples"},"Simple Step Examples"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const EmptyStep = {\n    id: 'EMPTY',\n    skip: true\n}\n\nconst ErrorStep =  {\n    id: 'ERROR',\n    error: 'Something went wrong please try again later!'\n}\n\nconst StateStep  = {\n    id: 'UPDATE_STATE',\n    state: {\n        \"static_data\": \"static_value\",\n        \"dynamic_data.$\": \"$.payload.param1\"\n    }\n}\n")),(0,l.kt)("h3",{id:"database-codb"},"Database (CoDB)"),(0,l.kt)("p",null,"RBS has a DynamoDB-based NoSQL database called CoDB which you can use within your processes.\nIt has a Collection/Document/Collection/Document/\u2026 structure.\nProcess Manager fully supports CoDB operations: get, put, list, delete."),(0,l.kt)("h4",{id:"put-document"},"Put Document"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"interface PutDocument {\n    path: string\n    document: string\n    documentTTL?: number\n    outputPath?: string\n    resultPath?: string\n}\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Attribute Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Must"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"path"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},'CoDB document path to save data. It should start with a slash "/". Even number of folders in paths represent documents.')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"document"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"Path to data.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"documentTTL"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"The amount of time in seconds to keep the data.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"outputPath"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"$.0.response"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Path to resolve document response into output.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"resultPath"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Variable name to store output into state.")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const PutDocumentExample = {\n    id: 'SAVE_INTO_CODB',\n    path: '/collectionA/document1',\n    document: '$.pathToDocument',\n    documentTTL: 86400,\n    outputPath: '$.0.response',\n    resultPath: 'putDocumentResult'\n}\n")),(0,l.kt)("h4",{id:"get-document"},"Get Document"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"interface GetDocument {\n    path: string\n    documentCache: boolean\n    cacheTTL?: number\n    outputPath?: string\n    resultPath?: string\n}\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Attribute Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Must"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"path"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},'CoDB document path to retrieve data. It should start with a slash "/". Even number of folders in paths represent documents.')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"documentCache"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Flag to retrieve document from cache.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cacheTTL"),(0,l.kt)("td",{parentName:"tr",align:null},"number"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"The amount of time in seconds to keep the data in cache. It must be between 60 and 86400.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"outputPath"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"$.0.response.data"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Path to resolve document response into output.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"resultPath"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"Variable name to store output into state.")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const GetDocumentExample =  {\n    id: 'GET_FROM_CODB',\n    path: '/collectionA/document1',\n    documentCache: true,\n    cacheTTL: 900,\n    resultPath: 'getDocumentResult'\n}\n")),(0,l.kt)("h4",{id:"list-documents"},"List Documents"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"interface ListDocuments {\n    path: string\n    limit?: number\n    token?: string\n    resultPath?: string\n}\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Attribute Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Must"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"path"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},'CoDB collection path to retrieve list of its document IDs. It should start with a slash "/". Even number of folders in paths represent documents.')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"limit"),(0,l.kt)("td",{parentName:"tr",align:null},"number"),(0,l.kt)("td",{parentName:"tr",align:null},"20"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"The amount of documents to retrieve at once.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"token"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Pagination token.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"resultPath"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"Variable name to store output into state.")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const ListDocumentsExample =  {\n    id: 'LIST_CODB_DOCUMENTS',\n    path: '/collectionA/document1',\n    limit: 100,\n    token: '$.listDocumentsResult._paginationToken',\n    resultPath: 'listDocumentsResult'\n}\n")),(0,l.kt)("h4",{id:"delete-document"},"Delete Document"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"interface DeleteDocument {\n    path: string\n    limit?: number\n    token?: string\n    resultPath?: string\n}\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Attribute Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Must"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"path"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},'CoDB collection path to retrieve list of its document IDs. It should start with a slash "/". Even number of folders in paths represent documents.')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"resultPath"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Variable name to store output into state.")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const ListDocumentsExample = {\n    id: 'DELETE_CODB_DOCUMENT',\n    path: '/collectionA/document1',\n    resultPath: 'deleteDocumentResult'\n}\n")),(0,l.kt)("h3",{id:"working-with-rbs-services"},"Working With RBS Services"),(0,l.kt)("p",null,"RBS has various microservices which are available through middleware (RBS Core).\nA process can interact with those services in two ways: synchronous and asynchronous."),(0,l.kt)("p",null,"In synchronous way, service responds with the answer directly. Process Manager evaluates the response according to your attributes.\nIn asynchronous way, service responds with a simple success, then sends the actual answer through callback actions to complete the request as successful or failure.\nAt first, Process Manager checks if the service got the request successfully, then awaits for asynchronous callback to evaluate the response according to your attributes."),(0,l.kt)("h4",{id:"synchronous-service-call"},"Synchronous Service Call"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"interface ServiceCall {\n    inputPath?: string\n    parameters?: object\n    each?: string\n    action: string\n    service?: string\n    timeout?: { seconds: number, jump: string }\n    retry?: { backoffRate?: number, interval?: number, maxAttempts?: number, errors?: string[] }\n    headers?: { processId: string, executionId: string }\n    auth?: { userId?: string, token?: string, roles?: string[], claims: object }\n    outputPath?: string\n    resultPath?: string\n    errorPath?: string\n    actionRollback?: string\n    rollbackOnFailure?: boolean\n    plain?: boolean\n}\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Attribute Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Must"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"inputPath"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"$"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},'Path to input parameters. Make sure it starts with a dollar sign "$". Default value is "$". If you want to use a custom input, use "parameters" instead.')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"parameters"),(0,l.kt)("td",{parentName:"tr",align:null},"object"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},'Custom parameters. Must be a valid JSON. If you want to send data from state, use "inputPath" instead.')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"each"),(0,l.kt)("td",{parentName:"tr",align:null},"object"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},'Path to array of "parameters". All parameters will be called via ',(0,l.kt)("em",{parentName:"td"},"Promise.all"),", then collect all the responses.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"action"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"RBS action name to call.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"service"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Target service id.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"timeout"),(0,l.kt)("td",{parentName:"tr",align:null},"object"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Timeout in seconds. You should provide an action to jump to when timeout triggered. It's disabled by default.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"retry"),(0,l.kt)("td",{parentName:"tr",align:null},"object"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Retry policy with exponential backoff support. It's disabled by default.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"headers"),(0,l.kt)("td",{parentName:"tr",align:null},"object"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Adds processId and executionId headers to request.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"auth"),(0,l.kt)("td",{parentName:"tr",align:null},"object"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Generates or uses custom user token before calling the service. Be careful! User will have privileges according to these settings.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"outputPath"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"$"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Path to resolve service response into output.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"resultPath"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Variable name to store output into state.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"errorPath"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Path to resolve service error.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"rollbackOnFailure"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Flag for applying rollback.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"actionRollback"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"RBS action name for rollback.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"plain"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Flag for removing process related headers from service calls.")))),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"You should provide one of these attributes ",(0,l.kt)("inlineCode",{parentName:"p"},"inputPath"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"parameters")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"each")," with ",(0,l.kt)("inlineCode",{parentName:"p"},"action")," attribute to send a payload in your request.")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"If the service return an error when ",(0,l.kt)("inlineCode",{parentName:"p"},"retry")," is enabled, Process Manager retries the request with an exponential backoff according to your configuration.\nDo not forget that timeout and retry might end up a race condition.")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"If step fails when ",(0,l.kt)("inlineCode",{parentName:"p"},"rollbackOnFailure")," is enabled, Process Manager calls every ",(0,l.kt)("inlineCode",{parentName:"p"},"actionRollback")," executed before failed step.")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"If you want to call another process or you don't want to send metadata of current process in a service call, you should set ",(0,l.kt)("inlineCode",{parentName:"p"},"plain")," as true. Default value for ",(0,l.kt)("em",{parentName:"p"},"plain")," is false.")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"If you want to send metadata of a process in a service call, you should set processId and executionId in ",(0,l.kt)("inlineCode",{parentName:"p"},"headers")," attribute.\nMain purpose of this feature is that returning output of a subprocess to parent process.\nTo accomplish that, you should also collect parent processId and executionId as initial payload to be able to return them back.")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"By default a service call contains a service token created by Process Manager.\nTo be able to use process' metadata on service side, there are some extra headers automatically passed to the service like ",(0,l.kt)("em",{parentName:"p"},"processId"),", ",(0,l.kt)("em",{parentName:"p"},"processExecutionId"),", ",(0,l.kt)("em",{parentName:"p"},"processExecutorId")," and ",(0,l.kt)("em",{parentName:"p"},"processExecutorRole"),".\nOn the other hand, you can make a service call on user's behalf by using ",(0,l.kt)("inlineCode",{parentName:"p"},"auth")," attribute.\nThis feature has two ways of usages. In one of them, you should generate a valid custom token for a specific user and use it in ",(0,l.kt)("em",{parentName:"p"},"auth")," attribute with ",(0,l.kt)("inlineCode",{parentName:"p"},"token")," parameter. Otherwise you should provide ",(0,l.kt)("inlineCode",{parentName:"p"},"userId"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"roles")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"claims")," to generate a token before making the request.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const SynchronousServiceCallExample = {\n    id: 'GET_ORDER',\n    action: 'rbs.order.request.DATA',\n    parameters: { orderId: '$.payload.orderId' },\n    outputPath: '$.0.response',\n    resultPath: 'data',\n    errorPath: '$.0.errors.0'\n}\n")),(0,l.kt)("h4",{id:"asynchronous-service-call"},"Asynchronous Service Call"),(0,l.kt)("p",null,"The only difference between synchronous and asynchronous service calls are callback attributes."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"interface Call {\n    actionCallback?: string\n    actionFailureCallback?: string\n}\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Attribute Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Must"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"actionCallback"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"Callback action for successful requests.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"actionFailureCallback"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Callback action for failed requests.")))),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"If you need an extra information in a step other than the first step, you can use ",(0,l.kt)("inlineCode",{parentName:"p"},"actionCallback")," without providing an action. In that case, instead of making a service call, Process Manager awaits for an asynchronous response from a client instance.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const AsynchronousServiceCallExample = {\n    id: 'PAYMENT',\n    action: 'rbs.billing.request.PAY',\n    inputPath: '$.payload.paymentInput',\n    actionCallback: 'rbs.billing.event.SUCCESS',\n    actionFailureCallback: 'rbs.billing.event.FAILURE',\n    outputPath: '$.0.response',\n    resultPath: 'payment',\n    errorPath: '$.0.errors.0'\n}\n")),(0,l.kt)("h3",{id:"working-with-other-processes"},"Working With Other Processes"),(0,l.kt)("p",null,"A process can start other processes as well as interact with them while they are still in progress.\nIn general programming, working with solution oriented, small and maintainable classes or functions is a best practice.\nThat works well in process development too."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"We recommend to develop processes to solve one problem at a time.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"interface Call {\n    process: string\n    invocationType: string\n    inputPath?: string\n    parameters?: object\n    executionId?: string\n    outputPath?: string\n    resultPath?: string\n    errorPath?: string\n}\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Attribute Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Must"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"process"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"Process ID to start.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"invocationType"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"NORMAL"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"Running mode for execution. Available options are ",(0,l.kt)("em",{parentName:"td"},"NORMAL"),", ",(0,l.kt)("em",{parentName:"td"},"EXPRESS"),", ",(0,l.kt)("em",{parentName:"td"},"EXPRESS_CACHED"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"inputPath"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"$"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},'Path to input parameters. Make sure it starts with a dollar sign "$". Default value is "$". If you want to use a custom input, use "parameters" instead.')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"parameters"),(0,l.kt)("td",{parentName:"tr",align:null},"object"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},'Custom parameters. Must be a valid JSON. If you want to send data from state, use "inputPath" instead.')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"executionId"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Execution ID to prevent PM assigning an auto generated ID.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"outputPath"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"$.0.response"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Path to resolve service response into output.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"resultPath"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Variable name to store output into state.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"errorPath"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Path to resolve service error.")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const StartProcessExample =  {\n    id: 'START_PROCESS',\n    process: 'TEST_PROCESS',\n    parameters: {},\n    outputPath: '$.0.response',\n    resultPath: 'startedProcess',\n    errorPath: '$.0.errors.0'\n}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const StartAnotherProcessExample = {\n    id: 'START_PROCESS_IN_EXPRESS_MODE',\n    process: 'ANOTHER_TEST_PROCESS',\n    startMode: 'EXPRESS',\n    parameters: {},\n    outputPath: '$.0.response',\n    resultPath: 'startedProcess',\n    errorPath: '$.0.errors.0'\n}\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"You should provide one of these attributes ",(0,l.kt)("inlineCode",{parentName:"p"},"inputPath")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"parameters")," to send an initial payload for the process.")),(0,l.kt)("h3",{id:"native-code-support"},"Native Code Support"),(0,l.kt)("p",null,"We keep working on improving Process Manager but if your process requires more programming abilities you can use native codes in two ways: SelectTransform and Javascript."),(0,l.kt)("h4",{id:"selecttransform"},"SelectTransform"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://selecttransform.github.io/site/transform.html"},"SelectTransform")," is an open source template tool for JSON documents."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"interface SelectTransform {\n    st: string\n    inputPath?: string\n    outputPath?: string\n    resultPath: string\n}\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Attribute Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Must"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"st"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"SelectTransform code to run in sandbox.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"inputPath"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"$"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},'Path to manage initial parameters. Make sure it starts with a dollar sign "$".')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"outputPath"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Path to resolve result of SelectTransform into output.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"resultPath"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"Variable name to store output into state.")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const STExample = {\n    id: 'SELECT_TRANSFORM',\n    st: '{{ name }}',\n    inputPath: '$.payload',\n    resultPath: 'name'\n}\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"If you want to return object instead of string, you should write your ",(0,l.kt)("em",{parentName:"p"},"SelectTransform")," code as a valid JSON.\nOtherwise you'll get a parsing error.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},'const ST_JSONExample = {\n    id: \'SELECT_TRANSFORM\',\n    st: `\n        {\n            "name": "{{ name }}",\n            "surname": "{{ surname }}"\n        }\n    `,\n    inputPath: \'$.payload\',\n    resultPath: \'profile\'\n}\n')),(0,l.kt)("h4",{id:"javascript"},"Javascript"),(0,l.kt)("p",null,"Your native Javascript code runs in a restricted sandbox.\nIt supports ",(0,l.kt)("a",{parentName:"p",href:"https://lodash.com"},"lodash")," and ",(0,l.kt)("a",{parentName:"p",href:"https://date-fns.org"},"dateFNS")," by default."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Input is available through a variable called ",(0,l.kt)("em",{parentName:"li"},"$"),"."),(0,l.kt)("li",{parentName:"ul"},"You can define your own functions. All user-defined functions are available through a variable called ",(0,l.kt)("em",{parentName:"li"},"_"),".")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"interface Request {\n    js: string\n    inputPath?: string\n    outputPath?: string\n    resultPath: string\n    fnCustomFunctionName?: string\n}\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Attribute Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Must"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"js"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"Javascript code to run in sandbox.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"inputPath"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"$"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},'Path to manage initial parameters. Make sure it starts with a dollar sign "$".')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"outputPath"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Path to resolve result of Javascript into output.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"resultPath"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"Variable name to store output into state.")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const JSExample =  {\n    id: 'JAVASCRIPT',\n    js: \"lodash.groupBy($.items, 'name')\",\n    inputPath: '$.payload',\n    resultPath: 'groupResult'\n}\n")),(0,l.kt)("p",null,"Same result with a custom function."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const JS_WithCustomFunctionExample = {\n    id: 'JAVASCRIPT',\n    js: '_.fnTest($.items)',\n    inputPath: '$.payload',\n    resultPath: 'groupResult',\n    fnTest: `(items) => lodash.groupBy(items, 'name')`\n}\n")),(0,l.kt)("h4",{id:"javascript-with-aws-sdk-support"},"Javascript with AWS SDK Support"),(0,l.kt)("p",null,"By default your Javascript code cannot import any 3rd party libraries.\nBut with AWS SDK support, you can import AWS SDK V3 modules and use them in your custom Javascript code."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"interface Model {\n    athena: [\n        ['Athena', '@aws-sdk/client-athena', 'AthenaClient']\n    ],\n    dynamodb: [\n        ['DynamoDBLib', '@aws-sdk/lib-dynamodb'],\n        ['DynamoDB', '@aws-sdk/client-dynamodb', 'DynamoDB']\n    ],\n    kinesis: [\n        ['Kinesis', '@aws-sdk/client-kinesis', 'KinesisClient']\n    ],\n    lambda: [\n        ['Lambda', '@aws-sdk/client-lambda', 'LambdaClient']\n    ],\n    personalize: [\n        ['Personalize', '@aws-sdk/client-personalize', 'PersonalizeClient']\n    ],\n    personalizeEvents: [\n        ['PersonalizeEvents', '@aws-sdk/client-personalize-events', 'PersonalizeEventsClient'],\n    ],\n    personalizeRuntime: [\n        ['PersonalizeRuntime', '@aws-sdk/client-personalize-runtime', 'PersonalizeRuntimeClient'],\n    ],\n    s3: [\n        ['Storage', '@aws-sdk/lib-storage'],\n        ['S3', '@aws-sdk/client-s3', 'S3'],\n    ],\n    sns: [\n        ['SNS', '@aws-sdk/client-sns', 'SNSClient']\n    ],\n    sqs: [\n        ['SQS', '@aws-sdk/client-sqs', 'SQSClient']\n    ],\n}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"AWS\n\u2514\u2500\u2500\u2500 Athena\n\u2514\u2500\u2500\u2500 $athena: Athena.AthenaClient instance\n\u2502\n\u2514\u2500\u2500\u2500 DynamoDB\n\u2514\u2500\u2500\u2500 DynamoDBLib\n\u2514\u2500\u2500\u2500 $dynamoDB: DynamoDB.DynamoDB instance\n\u2502\n\u2514\u2500\u2500\u2500 Kinesis\n\u2514\u2500\u2500\u2500 $kinesis: Kinesis.KinesisClient instance\n\u2502\n\u2514\u2500\u2500\u2500 Lambda\n\u2514\u2500\u2500\u2500 $lambda: Lambda.LambdaClient instance\n\u2502\n\u2514\u2500\u2500\u2500 Personalize\n\u2514\u2500\u2500\u2500 $personalize: Personalize.PersonalizeClient instance\n\u2514\u2500\u2500\u2500 PersonalizeEvents\n\u2514\u2500\u2500\u2500 $personalizeEvents: PersonalizeEvents.PersonalizeEventsClient instance\n\u2514\u2500\u2500\u2500 PersonalizeRuntime\n\u2514\u2500\u2500\u2500 $personalizeRuntime: PersonalizeRuntime.PersonalizeRuntimeClient instance\n\u2502\n\u2514\u2500\u2500\u2500 S3\n\u2514\u2500\u2500\u2500 Storage\n\u2514\u2500\u2500\u2500 $s3: S3.S3 instance\n\u2502\n\u2514\u2500\u2500\u2500 SNS\n\u2514\u2500\u2500\u2500 $sns: SNS.SNSClient instance\n\u2502\n\u2514\u2500\u2500\u2500 SQS\n\u2514\u2500\u2500\u2500 $sqs: SQS.SQSClient instance\n")),(0,l.kt)("h3",{id:"third-party-libraries"},"Third Party Libraries"),(0,l.kt)("h4",{id:"working-with-dates"},"Working with Dates"),(0,l.kt)("p",null,"Besides ",(0,l.kt)("em",{parentName:"p"},"$$.DATE")," directive, Process Manager also has a date component which supports all ",(0,l.kt)("a",{parentName:"p",href:"https://date-fns.org"},"date-fns")," features in chain mode."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"interface Call {\n    date: { val?: string | number, chain: any[] }\n    inputPath?: string\n    outputPath?: string\n    resultPath: string\n}\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Attribute Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Must"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"date"),(0,l.kt)("td",{parentName:"tr",align:null},"object"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"initial date and date-fns method chain. If you don't provide an initial date, it will use current date instead.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"inputPath"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"$"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},'Path to manage initial parameters. Make sure it starts with a dollar sign "$".')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"outputPath"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Path to resolve result of date-fns chain into output.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"resultPath"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"dateResult"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"Variable name to store output into state.")))),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"In chain mode, you can call a ",(0,l.kt)("em",{parentName:"p"},"date-fns")," method after another. We need to provide a single array that each item is also an array with ",(0,l.kt)("em",{parentName:"p"},"date-fns")," method and its parameters.")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Your native codes also support ",(0,l.kt)("em",{parentName:"p"},"date-fns")," as well as they support ",(0,l.kt)("em",{parentName:"p"},"lodash")," and ",(0,l.kt)("em",{parentName:"p"},"joi"),".")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const DateExample = {\n    id: 'DATE',\n    date: {\n        chain: [\n            ['addDays', -1],\n            ['format', 'yyyy-MM-dd']\n        ]\n    },\n    resultPath: 'yesterdayAtSameTime'\n}\n")),(0,l.kt)("h4",{id:"validation-support"},"Validation Support"),(0,l.kt)("p",null,"Process Manager has a strong data validation support. It uses ",(0,l.kt)("a",{parentName:"p",href:"https://joi.dev"},"joi")," under the hood.\nJust like ",(0,l.kt)("em",{parentName:"p"},"date-fns"),", validation support also uses chain mechanism for applying multiple validations to a single variable."),(0,l.kt)("p",null,"Validation is possible in two ways: simple validation which covers primitive types or objects with only primitive attributes.\nOn the other hand, if your data has a complex interface, you can define each type as model and use them in your validation expressions."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"interface Call {\n    validate: object\n    models?: object\n    inputPath?: string\n    outputPath?: string\n    resultPath: string\n}\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Attribute Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Must"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"validate"),(0,l.kt)("td",{parentName:"tr",align:null},"object"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"Defines fields to validate. Each key should represent a field to validate.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"models"),(0,l.kt)("td",{parentName:"tr",align:null},"object"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Model definitions to validate advanced data types.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"inputPath"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"$"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},'Path to manage initial parameters. Make sure it starts with a dollar sign "$".')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"outputPath"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Path to resolve result of validation into output.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"resultPath"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"validationResult"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"Variable name to store output into state.")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const SimpleValidationExample = {\n    id: 'SIMPLE_VALIDATION',\n    validate: {\n        name: [\n            'string',\n            ['min', 2],\n            ['max', 24],\n            'required'\n        ],\n        surname: [\n            'string',\n            ['min', 2],\n            ['max', 40]\n        ]\n    }\n}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const AdvancedValidationExample = {\n    id: 'ADVANCED_VALIDATION',\n    validate: {\n        tags: 'tags',\n        singleTag: 'tag'\n    },\n    models: {\n        tag: {\n            type: 'object',\n            attributes: {\n                name: ['string', ['min', 2], ['max', 250], 'required']\n            }\n        },\n        tags: {\n            type: 'array',\n            of: 'tag'\n        }\n    }\n}\n")),(0,l.kt)("h4",{id:"multi-factor-authentication"},"Multi Factor Authentication"),(0,l.kt)("p",null,"Process Manager has methods for generating MFA secret with QR code as well as generating valid tokens and verifying them.\nIt uses ",(0,l.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/node-2fa"},"node-2fa")," under the hood."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"interface Call {\n    mfaSecret: { name: string, account: string }\n    mfaToken: string\n    mfaVerify: { secret: string, token: string }\n    resultPath: string\n}\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Attribute Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Must"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"mfaSecret"),(0,l.kt)("td",{parentName:"tr",align:null},"object"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Parameters to generate multi factor authentication secret. Keep secrets user specific and store in DB.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"mfaToken"),(0,l.kt)("td",{parentName:"tr",align:null},"object"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Secret to generate token. Returns an object containing, 6-character token.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"mfaVerify"),(0,l.kt)("td",{parentName:"tr",align:null},"object"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Parameters to verify token for a specific secret. Checks if a time-based token matches a token from secret key, within a +/- window (default: 4) minute window.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"resultPath"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"mfaResult"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"Variable name to multi-factor output into state.")))),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"You should provide one of ",(0,l.kt)("em",{parentName:"p"},"mfa")," attributes to use multi factor authentication support.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const MultiFactorAuthenticationSecret =  {\n    id: 'VERIFY',\n    mfaSecret: { name: \"example.com\", 'account.$': '$$.USER_ID' }\n}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const MultiFactorAuthenticationVerify = {\n    id: 'VERIFY',\n    mfaVerify: { secret: '$.profile.secret', token: '$.payload.token'}\n}\n")),(0,l.kt)("h4",{id:"public-file-storage"},"Public File Storage"),(0,l.kt)("p",null,"RBS Storage service has file size limits because of Lambda and API Gateway restrictions.\nTo avoid that, you can store your files in Process Manager directly.\nWhen you put a file, you can access it via a public URL."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"interface Call {\n    fileContent: string\n    filename?: string\n    fileNotExists?: boolean\n    fileBase64?: boolean\n    fileType?: string\n    fileTTL?: '1d' | '3d' | '7d' | '15d'\n}\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Attribute Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Must"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"fileContent"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"File content to put into S3.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"filename"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Name of the file. If you don't provide a name, a ULID string will be assigned automatically.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"fileType"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"undefined"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Mime-type of the file. Default value is application/json.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"fileNotExists"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Flag to prevent overwriting an existing file.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"fileBase64"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Flag to determine whether file format is base64 or not.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"fileTTL"),(0,l.kt)("td",{parentName:"tr",align:null},"1d, 3d, 7d or 15d"),(0,l.kt)("td",{parentName:"tr",align:null},"1d"),(0,l.kt)("td",{parentName:"tr",align:null},"\u274c"),(0,l.kt)("td",{parentName:"tr",align:null},"Time to live for the file. Default value is one day.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"resultPath"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"fileResult"),(0,l.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,l.kt)("td",{parentName:"tr",align:null},"Variable name to storage output into state.")))))}m.isMDXComponent=!0}}]);