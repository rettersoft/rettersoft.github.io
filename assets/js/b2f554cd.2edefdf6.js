"use strict";(self.webpackChunkrbs_dev_docs=self.webpackChunkrbs_dev_docs||[]).push([[477],{10:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"an-object-oriented-cloud","metadata":{"permalink":"/blog/an-object-oriented-cloud","editUrl":"https://github.com/facebook/docusaurus/edit/main/website/blog/blog/2021-12-06-an-object-oriented-cloud.md","source":"@site/blog/2021-12-06-an-object-oriented-cloud.md","title":"An object oriented cloud","description":"Cloud providers like AWS, GCP, Azure are next generation machines for writing programs to. Instead of writing containerized apps you can write serverless apps for these new big super computers.","date":"2021-12-06T00:00:00.000Z","formattedDate":"December 6, 2021","tags":[{"label":"rtbs","permalink":"/blog/tags/rtbs"},{"label":"object oriented cloud","permalink":"/blog/tags/object-oriented-cloud"},{"label":"cloud","permalink":"/blog/tags/cloud"}],"readingTime":1.8,"truncated":true,"authors":[{"name":"Baran Baygan","title":"Solution Architect","url":"https://github.com/baranbaygan","imageURL":"https://miro.medium.com/fit/c/262/262/1*QxTUo9SYcZQj8EomGLqOPA.jpeg","key":"baran"}],"nextItem":{"title":"Welcome","permalink":"/blog/welcome"}},"content":"Cloud providers like AWS, GCP, Azure are next generation machines for writing programs to. Instead of writing containerized apps you can write serverless apps for these new big super computers. \\n\\nHowever they allow you write stateless functions only. Data and functions are separated like in the early days of computing. rtbs.io is an object oriented approach to serverless cloud.\\n\\n\x3c!--truncate--\x3e\\n\\nI will give AWS specific examples in this article.\\n\\nMost common approach is to write a function and tie that to a data store like DynamoDB. You can call that function via Api Gateway. From your client application you can call your api via a rest api.\\n\\n\\n### Problem\\n\\nBig promise of serverless is that developers only have to write business logic. And it really helps. However they still need to deal with following issues:\\n\\n**Authentication** \u2014 Yes there are services like Cognito, but they are not really easy to use.\\n\\n**Client-Server-Communication** \u2014 Rest api\u2019s are great but they are not as easy as realtime syncing of client/server data.\\n\\n**Sorting of client requests** \u2014 Biggest problem is that somehow you need to sort requests coming from clients in object level. Think of a wallet app, transactions need to be fed into a SQS Fifo queue or maybe locked in DynamoDB row level. It becomes even more difficult if you need a request/response model and also need to sort these requests.\\nOrganization of a project in terms of source code\\n\\n### Solution\\n\\nRBS solves these three major problems by implementing following:\\n\\n**Authentication** \u2014 is built into objects.\\n**Client-Server-Communication** \u2014 Objects have internal state and this state is streamed to clients in realtime.\\n**Sorting** \u2014 Any method request to an object is queued and handled in FIFO manner.\\n\\n### Example: A simple wallet\\nThe following template.yml defines two methods in a class.\\n\\n```yml\\npreAuthorizer: index.preAuthorizer\\nauthorizer: index.authorizer\\ninit: index.init\\ngetState: index.getState\\ngetInstanceId: index.getInstanceId\\nmethods:\\n    - method: addMoney\\n      tag: test\\n      sync: true\\n      steps:\\n          - id: addMoney\\n            \\n    - method: spendMoney\\n      tag: test\\n      sync: true\\n      steps:\\n          - id: spendMoney\\n            handler: index.spendMoneyHandler\\n          - id: success\\n          - id: insufficientFunds\\n            handler: index.handler\\n      flow:\\n          - direction:\\n                - spendMoney\\n                - success\\n          - id: gotoInsufficientFunds\\n            direction:\\n                - spendMoney\\n                - insufficientFunds\\n\\n\\n```"},{"id":"welcome","metadata":{"permalink":"/blog/welcome","editUrl":"https://github.com/facebook/docusaurus/edit/main/website/blog/blog/2021-08-26-welcome/index.md","source":"@site/blog/2021-08-26-welcome/index.md","title":"Welcome","description":"Docusaurus blogging features are powered by the blog plugin.","date":"2021-08-26T00:00:00.000Z","formattedDate":"August 26, 2021","tags":[{"label":"facebook","permalink":"/blog/tags/facebook"},{"label":"hello","permalink":"/blog/tags/hello"},{"label":"docusaurus","permalink":"/blog/tags/docusaurus"}],"readingTime":0.405,"truncated":false,"authors":[{"name":"S\xe9bastien Lorber","title":"Docusaurus maintainer","url":"https://sebastienlorber.com","imageURL":"https://github.com/slorber.png","key":"slorber"},{"name":"Yangshun Tay","title":"Front End Engineer @ Facebook","url":"https://github.com/yangshun","imageURL":"https://github.com/yangshun.png","key":"yangshun"}],"prevItem":{"title":"An object oriented cloud","permalink":"/blog/an-object-oriented-cloud"},"nextItem":{"title":"MDX Blog Post","permalink":"/blog/mdx-blog-post"}},"content":"[Docusaurus blogging features](https://docusaurus.io/docs/blog) are powered by the [blog plugin](https://docusaurus.io/docs/api/plugins/@docusaurus/plugin-content-blog).\\n\\nSimply add Markdown files (or folders) to the `blog` directory.\\n\\nRegular blog authors can be added to `authors.yml`.\\n\\nThe blog post date can be extracted from filenames, such as:\\n\\n- `2019-05-30-welcome.md`\\n- `2019-05-30-welcome/index.md`\\n\\nA blog post folder can be convenient to co-locate blog post images:\\n\\n![Docusaurus Plushie](./docusaurus-plushie-banner.jpeg)\\n\\nThe blog supports tags as well!\\n\\n**And if you don\'t want a blog**: just delete this directory, and use `blog: false` in your Docusaurus config."},{"id":"mdx-blog-post","metadata":{"permalink":"/blog/mdx-blog-post","editUrl":"https://github.com/facebook/docusaurus/edit/main/website/blog/blog/2021-08-01-mdx-blog-post.mdx","source":"@site/blog/2021-08-01-mdx-blog-post.mdx","title":"MDX Blog Post","description":"Blog posts support Docusaurus Markdown features, such as MDX.","date":"2021-08-01T00:00:00.000Z","formattedDate":"August 1, 2021","tags":[{"label":"docusaurus","permalink":"/blog/tags/docusaurus"}],"readingTime":0.175,"truncated":false,"authors":[{"name":"S\xe9bastien Lorber","title":"Docusaurus maintainer","url":"https://sebastienlorber.com","imageURL":"https://github.com/slorber.png","key":"slorber"}],"prevItem":{"title":"Welcome","permalink":"/blog/welcome"},"nextItem":{"title":"First Blog Post","permalink":"/blog/first-blog-post"}},"content":"Blog posts support [Docusaurus Markdown features](https://docusaurus.io/docs/markdown-features), such as [MDX](https://mdxjs.com/).\\n\\n:::tip\\n\\nUse the power of React to create interactive blog posts.\\n\\n```js\\n<button onClick={() => alert(\'button clicked!\')}>Click me!</button>\\n```\\n\\n<button onClick={() => alert(\'button clicked!\')}>Click me!</button>\\n\\n:::"},{"id":"first-blog-post","metadata":{"permalink":"/blog/first-blog-post","editUrl":"https://github.com/facebook/docusaurus/edit/main/website/blog/blog/2019-05-28-first-blog-post.md","source":"@site/blog/2019-05-28-first-blog-post.md","title":"First Blog Post","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet","date":"2019-05-28T00:00:00.000Z","formattedDate":"May 28, 2019","tags":[{"label":"hola","permalink":"/blog/tags/hola"},{"label":"docusaurus","permalink":"/blog/tags/docusaurus"}],"readingTime":0.12,"truncated":false,"authors":[{"name":"Gao Wei","title":"Docusaurus Core Team","url":"https://github.com/wgao19","image_url":"https://github.com/wgao19.png","imageURL":"https://github.com/wgao19.png"}],"prevItem":{"title":"MDX Blog Post","permalink":"/blog/mdx-blog-post"}},"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet"}]}')}}]);