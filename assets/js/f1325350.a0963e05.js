"use strict";(self.webpackChunkrbs_dev_docs=self.webpackChunkrbs_dev_docs||[]).push([[9411],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),d=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=d(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=d(n),m=o,b=p["".concat(c,".").concat(m)]||p[m]||u[m]||s;return n?r.createElement(b,a(a({ref:t},l),{},{components:n})):r.createElement(b,a({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=p;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var d=2;d<s;d++)a[d]=n[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},533:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return d},toc:function(){return l},default:function(){return p}});var r=n(7462),o=n(3366),s=(n(7294),n(3905)),a=["components"],i={},c="Android",d={unversionedId:"sdks/Android",id:"sdks/Android",isDocsHomePage:!1,title:"Android",description:"Latest Version:",source:"@site/docs/sdks/Android.mdx",sourceDirName:"sdks",slug:"/sdks/Android",permalink:"/docs/sdks/Android",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/sdks/Android.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Javascript",permalink:"/docs/sdks/JS"},next:{title:"iOS",permalink:"/docs/sdks/ios"}},l=[{value:"Latest Version: ",id:"latest-version-",children:[],level:5},{value:"Add it in your root build.gradle at the end of repositories:",id:"add-it-in-your-root-buildgradle-at-the-end-of-repositories",children:[],level:5},{value:"Add the dependency",id:"add-the-dependency",children:[],level:5},{value:"Proguard config",id:"proguard-config",children:[],level:5},{value:"How to use?",id:"how-to-use",children:[],level:3},{value:"Cloud Objects",id:"cloud-objects",children:[],level:3}],u={toc:l};function p(e){var t=e.components,n=(0,o.Z)(e,a);return(0,s.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"android"},"Android"),(0,s.kt)("h5",{id:"latest-version-"},"Latest Version: ",(0,s.kt)("a",{parentName:"h5",href:"https://jitpack.io/#rettersoft/rbs-android-sdk"},(0,s.kt)("img",{parentName:"a",src:"https://jitpack.io/v/rettersoft/rbs-android-sdk.svg",alt:null}))),(0,s.kt)("h5",{id:"add-it-in-your-root-buildgradle-at-the-end-of-repositories"},"Add it in your root build.gradle at the end of repositories:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"allprojects {\n  repositories {\n    ...\n    maven { url 'https://jitpack.io' }\n  }\n}\n")),(0,s.kt)("h5",{id:"add-the-dependency"},"Add the dependency"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"dependencies {\n   implementation 'com.github.rettersoft:rbs-android-sdk:1.0.1'\n}\n")),(0,s.kt)("h5",{id:"proguard-config"},"Proguard config"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"-keep class com.rettermobile** { *; }\n-keep class com.rettermobile.* { *; }\n")),(0,s.kt)("h3",{id:"how-to-use"},"How to use?"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},'val rbs = RBS(applicationContext = applicationContext, projectId = "{PROJECT_ID}")\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"rbs.setOnClientAuthStatusChangeListener { rbsClientAuthStatus, rbsUser -> }\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},'rbs.sendAction(\n  action = "rbs.businessuserauth.request.LOGIN",\n  data = mapOf(Pair("email", "email@test.com"), Pair("password", "password")),\n  success = {\n     val type = object : TypeToken<List<AuthResponse>>() {}.type\n     val items: List<AuthResponse> = Gson().fromJson(it!!, type)\n\n     rbs.authenticateWithCustomToken(items[0].response!!.customToken)\n  }\n)\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},'rbs.sendAction(action = "rbs.product.request.SEARCH", success = { jsonData ->\n  Log.e("RBSService", jsonData) // Convert to data model with Gson()\n  Toast.makeText(this, jsonData, Toast.LENGTH_LONG).show()\n}, error = {\n  Toast.makeText(this, it?.message, Toast.LENGTH_LONG).show()\n})\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"rbs.signOut()\n")),(0,s.kt)("h3",{id:"cloud-objects"},"Cloud Objects"),(0,s.kt)("p",null,"Get a cloud object and subscribe to its state"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},'rbs.getCloudObject(\n   options = RBSCloudObjectOptions(\n         classId = "AndroidTest",\n         instanceId = "01FPTD2HAQGB5BS7J01S0QD7Q2"\n   ),\n   success = { cloudObj ->\n         this@MainActivity.cloudObj = cloudObj\n\n         cloudObj?.user?.subscribe(eventFired = {\n            RBSLogger.log("SUCCESS USER $it")\n         }, errorFired = {\n            RBSLogger.log("SUCCESS USER ${it?.message}")\n         })\n\n         cloudObj?.role?.subscribe(eventFired = {\n            RBSLogger.log("SUCCESS ROLE $it")\n         }, errorFired = {\n            RBSLogger.log("SUCCESS ROLE ${it?.message}")\n         })\n\n         cloudObj?.public?.subscribe(eventFired = {\n            RBSLogger.log("SUCCESS PUBLIC $it")\n         }, errorFired = {\n            RBSLogger.log("SUCCESS PUBLIC ${it?.message}")\n         })\n   })\n')),(0,s.kt)("p",null,"Call a method on an object instance"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},'cloudObj?.call(\n      options = RBSCloudObjectOptions(method = "sayHello"),\n      eventFired = {\n         val response = Gson().fromJson(it, SomeModel::class.java)\n      })\n')))}p.isMDXComponent=!0}}]);