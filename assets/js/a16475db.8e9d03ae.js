"use strict";(self.webpackChunkrbs_dev_docs=self.webpackChunkrbs_dev_docs||[]).push([[1320],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,b=d["".concat(i,".").concat(m)]||d[m]||p[m]||a;return n?r.createElement(b,s(s({ref:t},u),{},{components:n})):r.createElement(b,s({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:o,s[1]=l;for(var c=2;c<a;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3498:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return i},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),s=["components"],l={},i="iOS",c={unversionedId:"sdks/ios",id:"sdks/ios",isDocsHomePage:!1,title:"iOS",description:"CI Status",source:"@site/docs/sdks/ios.mdx",sourceDirName:"sdks",slug:"/sdks/ios",permalink:"/docs/sdks/ios",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/sdks/ios.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Android",permalink:"/docs/sdks/Android"},next:{title:"Data Object",permalink:"/docs/api-ref/data"}},u=[{value:"Example",id:"example",children:[],level:2},{value:"About RBS",id:"about-rbs",children:[],level:2},{value:"Requirements",id:"requirements",children:[],level:2},{value:"Installation",id:"installation",children:[{value:"Cocoapods",id:"cocoapods",children:[],level:3},{value:"Swift Package Manager",id:"swift-package-manager",children:[],level:3}],level:2},{value:"Initialize SDK",id:"initialize-sdk",children:[],level:2},{value:"Authenticate",id:"authenticate",children:[],level:2},{value:"RBS Delegate",id:"rbs-delegate",children:[],level:2},{value:"Cloud Objects",id:"cloud-objects",children:[{value:"Response and Error structures SDK returns",id:"response-and-error-structures-sdk-returns",children:[],level:3},{value:"Example iOS Client Code with Cloud Objects",id:"example-ios-client-code-with-cloud-objects",children:[],level:3}],level:2}],p={toc:u};function d(e){var t=e.components,n=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"ios"},"iOS"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://travis-ci.org/baranbaygan/RBS"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/travis/baranbaygan/RBS.svg?style=flat",alt:"CI Status"})),"\n",(0,a.kt)("a",{parentName:"p",href:"https://cocoapods.org/pods/RBS"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/cocoapods/v/RBS.svg?style=flat",alt:"Version"})),"\n",(0,a.kt)("a",{parentName:"p",href:"https://cocoapods.org/pods/RBS"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/cocoapods/l/RBS.svg?style=flat",alt:"License"})),"\n",(0,a.kt)("a",{parentName:"p",href:"https://cocoapods.org/pods/RBS"},(0,a.kt)("img",{parentName:"a",src:"https://img.shields.io/cocoapods/p/RBS.svg?style=flat",alt:"Platform"}))),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"To run the example project, clone the repo, and run ",(0,a.kt)("inlineCode",{parentName:"p"},"pod install")," from the Example directory first."),(0,a.kt)("h2",{id:"about-rbs"},"About RBS"),(0,a.kt)("p",null,"RBS can be used by developers to build event based systems. You should create an RBS account and an RBS project to start. "),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://console.retter.io"},"https://console.retter.io")),(0,a.kt)("h2",{id:"requirements"},"Requirements"),(0,a.kt)("p",null,"You need to have a RTBS projectId."),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("h3",{id:"cocoapods"},"Cocoapods"),(0,a.kt)("p",null,"RTBS is available through ",(0,a.kt)("a",{parentName:"p",href:"https://cocoapods.org"},"CocoaPods"),". To install\nit, simply add the following line to your Podfile:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"pod 'RBS'\n")),(0,a.kt)("h3",{id:"swift-package-manager"},"Swift Package Manager"),(0,a.kt)("p",null,"You can use swift package manager with following repo url and using main branch:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"https://github.com/rettersoft/rbs-ios-sdk\n")),(0,a.kt)("h2",{id:"initialize-sdk"},"Initialize SDK"),(0,a.kt)("p",null,"Initialize the SDK with your project id created in RBS console."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'let rbs = RBS(config: RBSConfig(projectId: "{PROJECT_ID}"))\n')),(0,a.kt)("h2",{id:"authenticate"},"Authenticate"),(0,a.kt)("p",null,"RBS client's authenticateWithCustomToken method should be used to authenticate a user. If you don't call this method, client will send actions as an anonymous user."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"rbs.authenticateWithCustomToken(customToken)\n")),(0,a.kt)("p",null,"RBS custom tokens can be generated by a RBS service by contacting RBS core service via RBS SDK."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A client app sends a request to a RBS service which has permission to generate RBS custom tokens."),(0,a.kt)("li",{parentName:"ul"},"RBS Service uses RBS SDK on the server side to communicate with RBS Core to generate custom token with user credentials."),(0,a.kt)("li",{parentName:"ul"},"RBS Core creates a custom token and returns it to the service."),(0,a.kt)("li",{parentName:"ul"},"The service returns it to the client application."),(0,a.kt)("li",{parentName:"ul"},"The client application uses RBS SDK authenticateWithCustomToken method to sign in as this user. From that point on any request made by this client, is recognized as this user by all RBS services.")),(0,a.kt)("p",null,"You can sign out with .signout method."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"rbs.signOut()\n")),(0,a.kt)("h2",{id:"rbs-delegate"},"RBS Delegate"),(0,a.kt)("p",null,"You can attach a delegate to RBS client."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"rbs.delegate = self\n")),(0,a.kt)("p",null,"And start receiving authentication state changes."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'extension ViewController : RBSClientDelegate {\n    func rbsClient(client: RBS, authStatusChanged toStatus: RBSClientAuthStatus) {\n        print("RBS authStatusChanged to \\(toStatus)")\n    }\n}\n')),(0,a.kt)("h2",{id:"cloud-objects"},"Cloud Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"var cloudObject: RBSCloudObject?\n")),(0,a.kt)("p",null,"Now let's get this object from the server:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'rbs.getCloudObject(with: RBSCloudObjectOptions(classID: "ChatRoom", instanceID: "01FPJX38KE3G8HBQ49VMF2KC3C")) { [weak self] (newObject) in\n    print("--- Cloud Object Created ---")\n    self?.cloudObject = newObject\n} onError: { (error) in\n    print(error)\n}\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"RBSCloudObjectOptions")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"\npublic struct RBSCloudObjectOptions {\n    public var classID: String?\n    public var instanceID: String?\n    public var keyValue: (key: String, value: String)?\n    public var method: String?\n    public var headers: [String: String]?\n    public var queryString: [String: String]?\n    public var httpMethod: Moya.Method?\n    public var body: [String: Any]?\n}\n")),(0,a.kt)("p",null,"Listen to state updates:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'self.cloudObject.state.user.subscribe { (data) in\n   print("---User State ->", data)\n} errorFired: { (error) in\n   print("---User State Error ->", error)\n}\n\nself.cloudObject.state.role.subscribe { (data) in\n   print("---RoleState State ->", data)\n} errorFired: { (error) in\n   print("---Role State Error ->", error)\n}\n\nself.cloudObject.state.public.subscribe { (data) in\n   print("---Public State ->", data)\n} errorFired: { (error) in\n   print("---Public State Error ->", error)\n}\n')),(0,a.kt)("p",null,"Let's call a method on an object:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'cloudObject\n   .call(with: RBSCloudObjectOptions(method: "sayHello")) { (response:RBSCloudObjectResponse) in\n      \n   } onError: { (error:RBSCloudObjectError) in\n      \n   }\n')),(0,a.kt)("h3",{id:"response-and-error-structures-sdk-returns"},"Response and Error structures SDK returns"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"public struct RBSCloudObjectResponse {\n    public let statusCode: Int\n    public let headers: [String:String]?\n    public let body: Data?\n}\npublic struct RBSCloudObjectError: Error {\n    public let error: RBSError\n    public let response: RBSCloudObjectResponse?\n}\npublic enum RBSError : Error {\n    case TokenError,\n         cloudNotConfigured,\n         classIdRequired,\n         cloudObjectNotFound,\n         methodReturnedError,\n         parsingError\n}\n")),(0,a.kt)("h3",{id:"example-ios-client-code-with-cloud-objects"},"Example iOS Client Code with Cloud Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'\n// Some models\nclass BaseError: Decodable {\n    var validationErrors: ValidationErrors? = nil\n}\n\nclass SignInErrorResponse: BaseError {\n    var error: String? = nil\n}\n\nstruct SignInResponse: Decodable {\n    let customToken: String\n}\n\n// A button tap handler\n@IBAction func btnLoginTapped(_ sender: Any) {\n   \n   guard let username = self.txtUsername.text, let password = self.txtPassword.text else { return }\n   \n   self\n      .rbs?\n      .getCloudObject(with: RBSCloudObjectOptions(classID: "User", keyValue: ("username", username)), onSuccess: { cloudObject in\n            \n            \n            cloudObject.call(with: RBSCloudObjectOptions(method: "signin", body: ["password": password])) { response in\n               // response is type of RBSCloudObjectResponse\n               // you can parse its body to your model like below:\n               if let body = response.body {\n                  let signInResponse: SignInResponse = try! JSONDecoder().decode(SignInResponse.self, from: body)\n                  print(signInResponse)\n               }\n            } onError: { error in\n               // error is type of RBSCloudObjectError\n               // you can also parse error response body to your error model like below:\n               if let response = error.response, let body = response.body {\n                  let signInErrorResponse: SignInErrorResponse = try! JSONDecoder().decode(SignInErrorResponse.self, from: body)\n                  print(signInErrorResponse)\n               }\n            }\n            \n      }, onError: { error in\n            \n            // error is type of RBSCloudObjectError\n            print(error)\n            \n      })\n}\n')))}d.isMDXComponent=!0}}]);