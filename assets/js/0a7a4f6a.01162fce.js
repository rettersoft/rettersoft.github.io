"use strict";(self.webpackChunkrbs_dev_docs=self.webpackChunkrbs_dev_docs||[]).push([[7867],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(n),m=a,h=p["".concat(l,".").concat(m)]||p[m]||u[m]||o;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var d=2;d<o;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2324:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return c},default:function(){return p}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={sidebar_position:3},l="Methods",d={unversionedId:"getting_started/methods",id:"getting_started/methods",isDocsHomePage:!1,title:"Methods",description:"In your class template you can add methods to your class.",source:"@site/docs/getting_started/methods.mdx",sourceDirName:"getting_started",slug:"/getting_started/methods",permalink:"/docs/getting_started/methods",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/getting_started/methods.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"State",permalink:"/docs/getting_started/state"},next:{title:"Authorization",permalink:"/docs/getting_started/authorization"}},c=[{value:"Steps",id:"steps",children:[],level:3},{value:"Concurrency &amp; FIFO",id:"concurrency--fifo",children:[],level:2}],u={toc:c};function p(e){var t=e.components,s=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"methods"},"Methods"),(0,o.kt)("p",null,"In your class template you can add methods to your class."),(0,o.kt)("p",null,"Each step can have a handle method. Let's define sayHello handler in our index.ts."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"preAuthorizer: index.preAuthorizer\ninit: index.init\ngetState: index.getState\n\nmethods:\n\n    - method: sayHello\n      tag: test\n      sync: true\n      steps:\n          - id: default\n            handler: index.sayHello\n")),(0,o.kt)("h3",{id:"steps"},"Steps"),(0,o.kt)("p",null,"Each method can have multiple steps. You can define a different handler function for each step. Steps are optional. You can define a method with one step only like the one above. However if you like you can define a method like below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"preAuthorizer: auth.preAuthorizer\ninit: index.init\ngetState: index.getState\ndependencies: ['user']\nmethods:\n    - method: signup\n      sync: true\n      steps:\n          - id: lookupUser\n            handler: auth.lookupUser\n          - id: userAlreadyExists\n          - id: createUser\n            handler: auth.createUser\n          - id: generateToken\n            handler: auth.generateToken\n          - id: sendEmailToCallCenter\n            handler: auth.sendEmailToCallCenter\n          - id: invalidData\n      flow:\n          - direction:\n            - lookupUser\n            - createUser\n          - direction:\n            - createUser\n            - sendEmailToCallCenter\n          - direction:\n            - sendEmailToCallCenter\n            - generateToken\n          - id: goToUserAlreadyExists\n            direction:\n            - lookupUser\n            - userAlreadyExists\n          - id: goToInvalidData\n            direction:\n            - createUser\n            - invalidData\n")),(0,o.kt)("p",null,"This definition creates following method:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Methods",src:n(315).Z})),(0,o.kt)("p",null,"You might want to add steps for:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"reusability: You can re-use some handler methods"),(0,o.kt)("li",{parentName:"ul"},"visualization: Even non developers can look at your method diagram and understand how it works. Also previous calls are logged in the system and you can visualize the flow of a method in UI.")),(0,o.kt)("h2",{id:"concurrency--fifo"},"Concurrency & FIFO"),(0,o.kt)("p",null,"One of the most important features of class methods is that by default concurrency is 1. Calls made to your method gets ordered and executed one by one and exactly once guaranteed. This is a very important and crucial part of development with cloud objects."),(0,o.kt)("p",null,"Every time a method is running you are handed a data object and you are responsible of returning it. Basically what you do is calculating the next state of this instance. As long as the concurrency is one there is no risk of a race condition. So it is safe to alter the state any way you want and also check for state and calculate your next move."),(0,o.kt)("p",null,"Let's say there are two methods on a wallet class."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Methods",src:n(9441).Z})),(0,o.kt)("p",null,"Everytime these are called they are ordered:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Methods",src:n(8328).Z})))}p.isMDXComponent=!0},315:function(e,t,n){t.Z=n.p+"assets/images/method_with_steps-e0f7e557c83a8cb363f53f05c2cefd07.png"},8328:function(e,t,n){t.Z=n.p+"assets/images/wallet_fifo-87672a4146170e430d593ec068252292.png"},9441:function(e,t,n){t.Z=n.p+"assets/images/wallet_methods-75f007f25ff1876a0e973ba411a6a633.png"}}]);