"use strict";(self.webpackChunkrio_doc=self.webpackChunkrio_doc||[]).push([[168],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return c}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),d=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=d(e.components);return o.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=d(n),c=r,h=m["".concat(s,".").concat(c)]||m[c]||u[c]||a;return n?o.createElement(h,i(i({ref:t},p),{},{components:n})):o.createElement(h,i({ref:t},p))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var d=2;d<a;d++)i[d]=n[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7107:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return u}});var o=n(7462),r=n(3366),a=(n(7294),n(3905)),i=["components"],l={id:"Models",sidebar_label:"Models",sidebar_position:6},s="Models",d={unversionedId:"Concepts/Models",id:"Concepts/Models",title:"Models",description:"Models are backbone of Cloud Objects validation mechanism. You can assign models to methods in order to validate before your method call. Thus, your code will be more readable and less error prone. We strictly suggests schemas written with JSON Schema (Draft-07).",source:"@site/docs/Concepts/Models.mdx",sourceDirName:"Concepts",slug:"/Concepts/Models",permalink:"/docs/Concepts/Models",editUrl:"https://github.com/rettersoft/rettersoft.github.io/blob/main/docs/Concepts/Models.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{id:"Models",sidebar_label:"Models",sidebar_position:6},sidebar:"ConceptsSideBar",previous:{title:"Dependencies",permalink:"/docs/Concepts/Dependencies"},next:{title:"Getting Started",permalink:"/docs/Concepts/CLI/GettingStarted"}},p={},u=[{value:"Required Variables in Models",id:"required-variables-in-models",level:2},{value:"User Model Example",id:"user-model-example",level:3},{value:"Using a Model",id:"using-a-model",level:2},{value:"Adding Models to Methods",id:"adding-models-to-methods",level:3},{value:"Using the Created Models",id:"using-the-created-models",level:3}],m={toc:u};function c(e){var t=e.components,n=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"models"},"Models"),(0,a.kt)("p",null,"Models are ",(0,a.kt)("inlineCode",{parentName:"p"},"backbone")," of Cloud Objects validation mechanism. You can assign models to methods in order to validate before your method call. Thus, your code will be more readable and less error prone. We strictly suggests schemas written with ",(0,a.kt)("a",{parentName:"p",href:"https://json-schema.org/draft-07/json-schema-release-notes.html"},(0,a.kt)("inlineCode",{parentName:"a"},"JSON Schema"))," (Draft-07)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="models/Person.json"',title:'"models/Person.json"'},'{\n  "title": "Person",\n  "type": "object",\n  "properties": {\n    "firstName": {\n      "type": "string",\n      "description": "The person\'s first name."\n    },\n    "lastName": {\n      "type": "string",\n      "description": "The person\'s last name."\n    },\n    "age": {\n      "description": "Age in years which must be equal to or greater than zero.",\n      "type": "integer",\n      "minimum": 0\n    }\n  }\n}\n')),(0,a.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"You will be provided client-side models written in ",(0,a.kt)("inlineCode",{parentName:"p"},"Kotlin"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Swift")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Typescript")," when you use models in your project."))),(0,a.kt)("h2",{id:"required-variables-in-models"},"Required Variables in Models"),(0,a.kt)("p",null,"While defining models, we specify the type of each variable and if a variable needs to be initialized."),(0,a.kt)("p",null,"If a variable is in the ",(0,a.kt)("inlineCode",{parentName:"p"},"required")," array, this means that variable needs to be initialized in typescript code."),(0,a.kt)("h3",{id:"user-model-example"},"User Model Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "object",\n  "required": [ // these specified fields needs to be initialized\n    "userFullName", \n    "email",\n    "userId",\n  ],\n  "properties": {\n    "userId": {\n      "type": "string"\n    },\n    "userRank": {\n      "type": "string"\n    },\n    "userFullName": {\n      "type": "string"\n    },\n    "email": {\n      "type": "string"\n    },\n    "lastEnteredPlatform":{\n      "enum": [\n        "WEB",\n        "IOS",\n        "ANDROID"\n      ]\n    }\n  }\n}\n')),(0,a.kt)("hr",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"For More Advanced Use Cases Visit:")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://json-schema.org/"},"Json Schema")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"using-a-model"},"Using a Model"),(0,a.kt)("p",null,"In order to user models for validation, you need to import them in your class ",(0,a.kt)("inlineCode",{parentName:"p"},"template")," file."),(0,a.kt)("p",null,"There are ",(0,a.kt)("strong",{parentName:"p"},"4")," types of models:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"inputModel",(0,a.kt)("blockquote",{parentName:"li"},(0,a.kt)("p",{parentName:"blockquote"},"Request body input model"))),(0,a.kt)("li",{parentName:"ul"},"outputModel",(0,a.kt)("blockquote",{parentName:"li"},(0,a.kt)("p",{parentName:"blockquote"},"Response body output model"))),(0,a.kt)("li",{parentName:"ul"},"errorModel",(0,a.kt)("blockquote",{parentName:"li"},(0,a.kt)("p",{parentName:"blockquote"},"Error response body output model"))),(0,a.kt)("li",{parentName:"ul"},"queryStringModel",(0,a.kt)("blockquote",{parentName:"li"},(0,a.kt)("p",{parentName:"blockquote"},"Query string params input model")))),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Usage"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="classes/User/template.yml"',title:'"classes/User/template.yml"'},"authorizer: index.authorizer\ninit:\n  handler: index.init\n  inputModel: UserProfileInputModel\ngetState: index.getState\ngetInstanceId: index.getInstanceId\nmethods:\n  - method: updateProfileInput\n    inputModel: StoreInfo\n    outputModel: ProfileModel\n    errorModel: ErrorModel\n    type: WRITE\n    invocationType: IMMEDIATE\n    handler: index.update\n\n  - method: getStoreInfo\n    queryStringModel: UserProfileParamsModel\n    outputModel: ProfileModel\n    errorModel: ErrorModel\n    type: READ\n    invocationType: IMMEDIATE\n    handler: index.profile\n")),(0,a.kt)("h3",{id:"adding-models-to-methods"},"Adding Models to Methods"),(0,a.kt)("p",null,"After we created the model (in this example CreateTodoInput and CreateTodoOutput), we should add the model to the method file which we are going to use. Add the models to your methods in template.yml file.   "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"# template.yml\n...rest\nmethods:\n    - method: createTodo\n      invocationType: IMMEDIATE\n      inputModel: CreateTodoInput     # CreateTodoInput model added\n      outputModel: CreateTodoOutput   # CreateTodoOutput model added\n      handler: index.createTodo\n")),(0,a.kt)("h3",{id:"using-the-created-models"},"Using the Created Models"),(0,a.kt)("p",null,"After we add the models to our method, we can use autocomplete to use our models in our method."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// index.ts\nimport { CreateTodoInput, CreateTodoOutput } from './rio'\n\nexport async function createTodo(data: Data<CreateTodoInput, CreateTodoOutput>): Promise<StepResponse> {\n    const { task } = data.request.body // autocompleted\n\n    data.response = {\n        statusCode: 200,\n        body: {\n            task, // autocompleted\n        }\n    }\n\n    return data\n}\n\n")))}c.isMDXComponent=!0}}]);