"use strict";(self.webpackChunkrio_doc=self.webpackChunkrio_doc||[]).push([[9281],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=u(n),m=o,f=d["".concat(c,".").concat(m)]||d[m]||l[m]||a;return n?r.createElement(f,s(s({ref:t},p),{},{components:n})):r.createElement(f,s({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var u=2;u<a;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4205:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return l}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),s=["components"],i={id:"Lookup Keys",sidebar_label:"Lookup Keys",sidebar_position:2},c="Lookup Keys",u={unversionedId:"Concepts/Shared Resources/Lookup Keys",id:"Concepts/Shared Resources/Lookup Keys",title:"Lookup Keys",description:"Instances have unique id's. However sometimes we need an easier method to find our instances instead of instance id's.",source:"@site/docs/Concepts/Shared Resources/Lookup Keys.md",sourceDirName:"Concepts/Shared Resources",slug:"/Concepts/Shared Resources/Lookup Keys",permalink:"/docs/Concepts/Shared Resources/Lookup Keys",editUrl:"https://github.com/rettersoft/rettersoft.github.io/blob/v2/docs/Concepts/Shared Resources/Lookup Keys.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"Lookup Keys",sidebar_label:"Lookup Keys",sidebar_position:2},sidebar:"ConceptsSideBar",previous:{title:"Client SDKs",permalink:"/docs/Concepts/Client SDKs"},next:{title:"Sorted Sets",permalink:"/docs/Concepts/Shared Resources/Sorted Sets"}},p={},l=[],d={toc:l};function m(e){var t=e.components,n=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"lookup-keys"},"Lookup Keys"),(0,a.kt)("p",null,"Instances have unique id's. However sometimes we need an easier method to find our instances instead of instance id's. "),(0,a.kt)("p",null,"For example think of a ",(0,a.kt)("strong",{parentName:"p"},"User")," class. Users have user id's but they might also have emails. Let's create a updateProfile method and mark this instance with users email."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'export async function updateEmail(data: Data): Promise<StepResponse> {\n\n    await rdk.setLookUpKey({\n        key: { name: "email", value: "jane@mail.com" }\n    })\n\n    return data\n}\n')),(0,a.kt)("p",null,"Let's change it a little bit to make it look a bit more realistic. Maybe we have sent a code to this users email and she is validating it like below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'export async function updateEmail(data: Data): Promise<StepResponse> {\n\n    if(data.request.body.code !== data.state.private.emailValidationCode) {\n        data.response = {statusCode: 403}\n        return data\n    }\n\n    await rdk.setLookUpKey({\n        key: { name: "email", value: "jane@mail.com" }\n    })\n\n    return data\n}\n')),(0,a.kt)("p",null,"Now let's see how to find this instance without knowing its instance id."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'export async function findUserByEmail(data: Data): Promise<StepResponse> {\n    \n    const lookupResult = await rdk.getLookUpKey({\n        key: {\n            name: "email", value: "jane@mail.com"\n        }\n    })\n\n    if(lookupResult.success) {\n        data.response = {\n            statusCode: 200,\n            body: lookupResult.data\n        }\n    }\n\n    return data\n}\n')),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"lookupResult.data")," contains:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'{\n  "instanceId": "01FPT7Z2W67MYZ3ZAKBDCPZ4AJ"\n}\n')))}m.isMDXComponent=!0}}]);