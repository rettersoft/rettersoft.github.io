"use strict";(self.webpackChunkrio_doc=self.webpackChunkrio_doc||[]).push([[8801],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return g}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(n),g=r,m=d["".concat(l,".").concat(g)]||d[g]||p[g]||i;return n?a.createElement(m,s(s({ref:t},u),{},{components:n})):a.createElement(m,s({ref:t},u))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var c=2;c<i;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},368:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return g},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return p}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),s=["components"],o={id:"SDK",sidebar_label:"SDK",sidebar_position:3},l="SDK",c={unversionedId:"Reference/SDK",id:"Reference/SDK",title:"SDK",description:"Installation",source:"@site/docs/Reference/SDK.md",sourceDirName:"Reference",slug:"/Reference/SDK",permalink:"/docs/Reference/SDK",editUrl:"https://github.com/rettersoft/rettersoft.github.io/blob/master/docs/Reference/SDK.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"SDK",sidebar_label:"SDK",sidebar_position:3},sidebar:"ReferenceSideBar",previous:{title:"Method Data Context",permalink:"/docs/Reference/Method Data Context"},next:{title:"generateCustomToken",permalink:"/docs/Reference/RDK/generateCustomToken"}},u={},p=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Initialization",id:"initialization",level:3},{value:"Authentication",id:"authentication",level:3},{value:"Cloud Objects",id:"cloud-objects",level:2},{value:"State Subscription",id:"state-subscription",level:3},{value:"Method Calls",id:"method-calls",level:3},{value:"Getting State",id:"getting-state",level:3},{value:"Available Methods",id:"available-methods",level:3},{value:"Instance List",id:"instance-list",level:3}],d={toc:p};function g(e){var t=e.components,n=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"sdk"},"SDK"),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)("p",null,"Using npm:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @retter/sdk\n")),(0,i.kt)("p",null,"Using yarn:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @retter/sdk\n")),(0,i.kt)("p",null,"Using unkpg:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<script src="https://unpkg.com/@retter/sdk/bundle/index.js"><\/script>\n')),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"You can use global ",(0,i.kt)("inlineCode",{parentName:"p"},"Retter")," keyword.")),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("h3",{id:"initialization"},"Initialization"),(0,i.kt)("p",null,"Clients should initialize with project id. Instances with same project id always be cached."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import Retter from '@retter/sdk'\n\nconst rio = Retter.getInstance(config: RetterClientConfig)\n\ninterface RetterClientConfig {\n    projectId: string\n    rootProjectId?: string\n    region?: RetterRegion\n    platform?: string\n    culture?: string\n}\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"projectId"),": Unique id of a project created in ",(0,i.kt)("a",{parentName:"p",href:"https://retter.io"},"retter.io Console")),(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"region"),": Could be ",(0,i.kt)("inlineCode",{parentName:"p"},"euWest1")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"euWest1Beta")),(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"platform"),": web, react-native, vs..."),(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"culture"),": tr, en-US, vs....")),(0,i.kt)("h3",{id:"authentication"},"Authentication"),(0,i.kt)("p",null,"Retter uses custom token to authenticate. This custom tokens can be given by an action or a cloud object."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"await rio.authenticateWithCustomToken('{CUSTOM_TOKEN}')\n")),(0,i.kt)("p",null,"Authentication statuses can be listened. SDK will fire an event that clients can be subscribe on status change."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"rio.authStatus.subscribe((event: RetterAuthChangedEvent) => {\n    //\n})\n")),(0,i.kt)("p",null,"Event gives information about current auth status. Clients can check the ",(0,i.kt)("inlineCode",{parentName:"p"},"authStatus")," to determine if they need to show login/register pages or not."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"interface RetterAuthChangedEvent {\n    authStatus: RetterAuthStatus\n    identity?: string\n    uid?: string\n    message?: string\n}\n\nenum RetterAuthStatus {\n    SIGNED_IN = 'SIGNED_IN',\n    SIGNED_IN_ANONYM = 'SIGNED_IN_ANONYM',\n    SIGNED_OUT = 'SIGNED_OUT',\n    AUTH_FAILED = 'AUTH_FAILED',\n}\n")),(0,i.kt)("h2",{id:"cloud-objects"},"Cloud Objects"),(0,i.kt)("p",null,"SDK will allow to use Retter Cloud Objects. Clients can subscribe realtime state changes, trigger cloud methods, ..."),(0,i.kt)("p",null,"Firstly, a cloud object must be initilize with ",(0,i.kt)("inlineCode",{parentName:"p"},"classId"),". Additional config options can be seen in interface below."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const cloudObject = await rio.getCloudObject(config: RetterCloudObjectConfig)\n\ninterface RetterCloudObjectConfig {\n    classId: string\n    key?: {\n        name: string\n        value: string\n    }\n    instanceId?: string\n    method?: string\n    headers?: {\n        [key: string]: string\n    }\n    queryStringParams?: {\n        [key: string]: string\n    }\n    body?: {\n        [key: string]: any\n    }\n    httpMethod?: 'get' | 'delete' | 'post' | 'put'\n}\n")),(0,i.kt)("h3",{id:"state-subscription"},"State Subscription"),(0,i.kt)("p",null,"Clients can be subscribe to realtime state (public, user and role states) changes. On first subscription, it gives current state."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"cloudObject.state.public.subscribe((state: { [key: string]: any }) => {\n    //\n})\n\ncloudObject.state.user.subscribe((state: { [key: string]: any }) => {\n    //\n})\n\ncloudObject.state.role.subscribe((state: { [key: string]: any }) => {\n    //\n})\n")),(0,i.kt)("h3",{id:"method-calls"},"Method Calls"),(0,i.kt)("p",null,"Any cloud method can be called via sdk. ",(0,i.kt)("inlineCode",{parentName:"p"},"method")," parameter must be specified. Other parameters can be seen in interface below."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const response = await cloudObject.call(params: RetterCloudObjectCall)\n\ninterface RetterCloudObjectCall {\n    method: string\n    headers?: {\n        [key: string]: string\n    }\n    queryStringParams?: {\n        [key: string]: string\n    }\n    body?: {\n        [key: string]: any\n    }\n    httpMethod?: 'get' | 'delete' | 'post' | 'put'\n}\n")),(0,i.kt)("p",null,"Call method will return a response with ",(0,i.kt)("inlineCode",{parentName:"p"},"RetterCallResponse")," type includes ",(0,i.kt)("inlineCode",{parentName:"p"},"data"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"status")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"headers"),"."),(0,i.kt)("h3",{id:"getting-state"},"Getting State"),(0,i.kt)("p",null,"Clients also access state via method call."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const response = await cloudObject.getState(params: RetterCloudObjectRequest)\n\ninterface RetterCloudObjectRequest {\n    headers?: {\n        [key: string]: string\n    }\n    queryStringParams?: {\n        [key: string]: string\n    }\n    body?: {\n        [key: string]: any\n    }\n    httpMethod?: 'get' | 'delete' | 'post' | 'put'\n}\n")),(0,i.kt)("p",null,"Get stae method will return a response with ",(0,i.kt)("inlineCode",{parentName:"p"},"RetterCallResponse")," type includes ",(0,i.kt)("inlineCode",{parentName:"p"},"data<RetterCloudObjectState>"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"status")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"headers"),"."),(0,i.kt)("h3",{id:"available-methods"},"Available Methods"),(0,i.kt)("p",null,"Cloud objects available methods can be accessed on ",(0,i.kt)("inlineCode",{parentName:"p"},"methods")," array/"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const methods = cloudObject.methods: RetterCloudObjectMethod[]\n\ninterface RetterCloudObjectMethod {\n    tag?: string\n    name: string\n    sync?: boolean\n    readonly?: boolean\n    inputModel?: string\n    outputModel?: string\n}\n")),(0,i.kt)("h3",{id:"instance-list"},"Instance List"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const instanceIds = await cloudObject.listInstances()\n")))}g.isMDXComponent=!0}}]);