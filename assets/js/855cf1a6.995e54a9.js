"use strict";(self.webpackChunkrio_doc=self.webpackChunkrio_doc||[]).push([[8834],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=o.createContext({}),c=function(e){var t=o.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,f=u["".concat(i,".").concat(m)]||u[m]||d[m]||s;return n?o.createElement(f,a(a({ref:t},p),{},{components:n})):o.createElement(f,a({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,a=new Array(s);a[0]=u;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var c=2;c<s;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},270:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return d}});var o=n(7462),r=n(3366),s=(n(7294),n(3905)),a=["components"],l={id:"Logs",sidebar_label:"Logs",sidebar_position:3},i="Logs",c={unversionedId:"Developer Console/Project Detail Screen/Class Editor/Class Tester/Calling Methods/Method Response/Logs",id:"Developer Console/Project Detail Screen/Class Editor/Class Tester/Calling Methods/Method Response/Logs",title:"Logs",description:"Logs carries what inside of console.log(). This is useful debug porpuses. More than often we need",source:"@site/docs/Developer Console/Project Detail Screen/Class Editor/Class Tester/Calling Methods/Method Response/Logs.md",sourceDirName:"Developer Console/Project Detail Screen/Class Editor/Class Tester/Calling Methods/Method Response",slug:"/Developer Console/Project Detail Screen/Class Editor/Class Tester/Calling Methods/Method Response/Logs",permalink:"/docs/Developer Console/Project Detail Screen/Class Editor/Class Tester/Calling Methods/Method Response/Logs",editUrl:"https://github.com/rettersoft/rettersoft.github.io/blob/main/docs/Developer Console/Project Detail Screen/Class Editor/Class Tester/Calling Methods/Method Response/Logs.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"Logs",sidebar_label:"Logs",sidebar_position:3},sidebar:"DeveloperConsoleSideBar",previous:{title:"Headers",permalink:"/docs/Developer Console/Project Detail Screen/Class Editor/Class Tester/Calling Methods/Method Response/Headers"}},p={},d=[{value:"Example Code",id:"example-code",level:2},{value:"Response&#39; s Logs",id:"response-s-logs",level:3}],u={toc:d};function m(e){var t=e.components,l=(0,r.Z)(e,a);return(0,s.kt)("wrapper",(0,o.Z)({},u,l,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"logs"},"Logs"),(0,s.kt)("p",null,"Logs carries what inside of ",(0,s.kt)("inlineCode",{parentName:"p"},"console.log()"),". This is useful debug porpuses. More than often we need\nto see the current state of a variable after some manupilations/calculations. With ",(0,s.kt)("inlineCode",{parentName:"p"},"Logs")," we can do\nthat easyly."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescirpt"},"console.log(variable)\n")),(0,s.kt)("h2",{id:"example-code"},"Example Code"),(0,s.kt)("p",null,"In this method's model, ",(0,s.kt)("inlineCode",{parentName:"p"},"mail")," variable is not ",(0,s.kt)("inlineCode",{parentName:"p"},"Required"),". This means ",(0,s.kt)("inlineCode",{parentName:"p"},"mail")," can be left empty.\nSo we may want to check if that's what happened in curtain cases."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},'export async function setOfficeProfile(data: Data): Promise<StepResponse> {\n\n  let {phoneNumber, mail, firstName, lastName} = data.request.body;\n  \n  if (mail == null)\n  {\n    console.log("Mail is empty!") // We can see if the mail is unregistered\n    mail = "default@mail.com"\n  }\n\n  console.log(mail) // prints the mail\n\n  data.response = {\n    statusCode: 200,\n    body: {\n      phoneNumber,\n      mail,\n      firstName,\n      lastName\n    }\n  };\n  return data;\n}\n')),(0,s.kt)("h3",{id:"response-s-logs"},"Response' s Logs"),(0,s.kt)("p",null,"We left the mail unregitered and this is the response log:"),(0,s.kt)("p",null,(0,s.kt)("img",{loading:"lazy",alt:"Logs",src:n(1137).Z,width:"1272",height:"596"})))}m.isMDXComponent=!0},1137:function(e,t,n){t.Z=n.p+"assets/images/Logs-a57351ed37b12322d69431d332421ebf.png"}}]);