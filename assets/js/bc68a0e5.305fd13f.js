"use strict";(self.webpackChunkrio_doc=self.webpackChunkrio_doc||[]).push([[6634],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return h}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=d(n),h=a,f=p["".concat(l,".").concat(h)]||p[h]||u[h]||o;return n?r.createElement(f,s(s({ref:t},c),{},{components:n})):r.createElement(f,s({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var d=2;d<o;d++)s[d]=n[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2098:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return i},metadata:function(){return d},toc:function(){return u}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),s=["components"],i={id:"Method Data Context",sidebar_label:"Method Data Context",sidebar_position:1},l="Method Data Context",d={unversionedId:"Reference/Method Data Context",id:"Reference/Method Data Context",title:"Method Data Context",description:"Data object used in every method call has some useful attributes. Mainly they are; Request, Response, State and Context.",source:"@site/docs/Reference/MethodDataContext copy.md",sourceDirName:"Reference",slug:"/Reference/Method Data Context",permalink:"/docs/Reference/Method Data Context",editUrl:"https://github.com/rettersoft/rettersoft.github.io/blob/master/docs/Reference/MethodDataContext copy.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"Method Data Context",sidebar_label:"Method Data Context",sidebar_position:1},sidebar:"ReferenceSideBar",previous:{title:"Template",permalink:"/docs/Reference/Template"},next:{title:"SDK",permalink:"/docs/Reference/SDK"}},c={},u=[{value:"Request",id:"request",level:2},{value:"Request Model",id:"request-model",level:3},{value:"Request Example",id:"request-example",level:3},{value:"Response",id:"response",level:2},{value:"Response Model",id:"response-model",level:3},{value:"Response Example",id:"response-example",level:3},{value:"Context",id:"context",level:2},{value:"Context Model",id:"context-model",level:3},{value:"State",id:"state",level:2},{value:"State Model",id:"state-model",level:3}],p={toc:u};function h(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"method-data-context"},"Method Data Context"),(0,o.kt)("p",null,"Data object used in every method call has some useful attributes. Mainly they are; Request, Response, State and Context."),(0,o.kt)("h2",{id:"request"},"Request"),(0,o.kt)("p",null,"Contains information about the request method has received. Has the following form:"),(0,o.kt)("h3",{id:"request-model"},"Request Model"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface Request<T = any> {\n    httpMethod: string                      // * GET, POST, OPTIONS etc.\n    body?: T                                // * Content received as the request.\n    headers: { [key: string]: string }      \n    queryStringParams: { [key: string]: string }\n}\n")),(0,o.kt)("h3",{id:"request-example"},"Request Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"if(data.request.httpMethod==='POST'){\n    const userMessage=data.request.body.userMessage\n}\n")),(0,o.kt)("h2",{id:"response"},"Response"),(0,o.kt)("p",null,"Using the response, anyting can be returned in the body. "),(0,o.kt)("h3",{id:"response-model"},"Response Model"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface Response<T = any> {\n    statusCode: number                      // * HTTP request codes. e.g 200 for success.\n    body?:                                  // * Actual content that will be returned as the response.\n    headers?: { [key: string]: string },    // * Response headers could be specified here.\n    isBase64Encoded?: boolean               // * If a file is returned in the response, it should be put in \n                                            // the body with base64 format rather than binary with this value being true. \n}\n")),(0,o.kt)("h3",{id:"response-example"},"Response Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"if(calculationResult==='correct'){\n    data.response={\n        statusCode: 200, body: 'Success!'\n        }\n}\nreturn data;\n")),(0,o.kt)("h2",{id:"context"},"Context"),(0,o.kt)("p",null,"Context has the metadata values of data."),(0,o.kt)("h3",{id:"context-model"},"Context Model"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface Context {\n    requestId: string                       // * Every method call has a unique requestId. \n    projectId: string                       // * projectId that method belongs to.\n    action: string                          // * Action method called with. \n    identity: string                        // * Identity of the methods caller. Like the rolename of the user. Extracted from token provided\n    headers?: { [key: string]: any }\n    classId: string                         // * classId this method belongs to.\n    instanceId?: string                     // * instanceId of this request received from.\n    methodName: string                      // * Name of the method. \n    refererClassId?: string         \n    refererInstanceId?: string\n    refererMethodName?: string\n    refererUserId?: string\n    refererIdentity?: string\n    claims?: { [key: string]: any }         // * Attributes claimed by method caller. Could be email, role,  etc.\n    isAnonymous?: boolean                   // * True if no token is provided with the request\n    culture?: string                        // * Language option if provided\n    platform?: string                       // * Platform information of the request, if provided\n    userId?: string                         // * userId of the method caller\n    sourceIP: string                        // * IP of the request received from\n    sessionId?: string                      // * The requests send in a certain period of time by the same user have the same \n                                            // sessionId. Managed on the server side. New sessionId value is created after certain period of \n                                            // time has passed between two request. Could be used to trace request a user send in a session. \n    clientOs?: string                       // * Operating System of the client that request is sent from\n    pathParameters?: {                      // * Path Parameters provided in the Api Call url\n        path: string                        \n        rule?: string                       \n        params?: { [key: string]: string }  \n    }\n}\n")),(0,o.kt)("h2",{id:"state"},"State"),(0,o.kt)("p",null,"State represents the state of that instance. Contrary to public, private object can not be accessed from other instances. "),(0,o.kt)("h3",{id:"state-model"},"State Model"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface State {\n    public?: { [key: string]: any }                         // * Object that public data can be stored in\n    private?: { [key: string]: any }                        // * Data that is private to that instance can be stored here. \n                                                            // Can not be shared publicly by default. It is in developers initiative to share to any specified user or role. \n    user?: { [userId: string]: { [key: string]: any } }     // * User specific data can be stored here with userId as key value.\n    role?: { [identity: string]: { [key: string]: any } }   // * Role specific data can be stored here with role as key value. \n}\n")))}h.isMDXComponent=!0}}]);