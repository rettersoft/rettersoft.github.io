<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Retter Mobile Blog</title>
        <link>https://rettersoft.github.io/blog</link>
        <description>Retter Mobile Blog</description>
        <lastBuildDate>Mon, 06 Dec 2021 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[An object oriented cloud]]></title>
            <link>https://rettersoft.github.io/blog/an-object-oriented-cloud</link>
            <guid>an-object-oriented-cloud</guid>
            <pubDate>Mon, 06 Dec 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Cloud providers like AWS, GCP, Azure are next generation machines for writing programs to. Instead of writing containerized apps you can write serverless apps for these new big super computers.]]></description>
            <content:encoded><![CDATA[<p>Cloud providers like AWS, GCP, Azure are next generation machines for writing programs to. Instead of writing containerized apps you can write serverless apps for these new big super computers. </p><p>However they allow you write stateless functions only. Data and functions are separated like in the early days of computing. rtbs.io is an object oriented approach to serverless cloud.</p><p>I will give AWS specific examples in this article.</p><p>Most common approach is to write a function and tie that to a data store like DynamoDB. You can call that function via Api Gateway. From your client application you can call your api via a rest api.</p><h3>Problem</h3><p>Big promise of serverless is that developers only have to write business logic. And it really helps. However they still need to deal with following issues:</p><p><strong>Authentication</strong> — Yes there are services like Cognito, but they are not really easy to use.</p><p><strong>Client-Server-Communication</strong> — Rest api’s are great but they are not as easy as realtime syncing of client/server data.</p><p><strong>Sorting of client requests</strong> — Biggest problem is that somehow you need to sort requests coming from clients in object level. Think of a wallet app, transactions need to be fed into a SQS Fifo queue or maybe locked in DynamoDB row level. It becomes even more difficult if you need a request/response model and also need to sort these requests.
Organization of a project in terms of source code</p><h3>Solution</h3><p>RBS solves these three major problems by implementing following:</p><p><strong>Authentication</strong> — is built into objects.
<strong>Client-Server-Communication</strong> — Objects have internal state and this state is streamed to clients in realtime.
<strong>Sorting</strong> — Any method request to an object is queued and handled in FIFO manner.</p><h3>Example: A simple wallet</h3><p>The following template.yml defines two methods in a class.</p><pre><code class="language-yml">preAuthorizer: index.preAuthorizer
authorizer: index.authorizer
init: index.init
getState: index.getState
getInstanceId: index.getInstanceId
methods:
    - method: addMoney
      tag: test
      sync: true
      steps:
          - id: addMoney
            
    - method: spendMoney
      tag: test
      sync: true
      steps:
          - id: spendMoney
            handler: index.spendMoneyHandler
          - id: success
          - id: insufficientFunds
            handler: index.handler
      flow:
          - direction:
                - spendMoney
                - success
          - id: gotoInsufficientFunds
            direction:
                - spendMoney
                - insufficientFunds


</code></pre>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Welcome]]></title>
            <link>https://rettersoft.github.io/blog/welcome</link>
            <guid>welcome</guid>
            <pubDate>Thu, 26 Aug 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Docusaurus blogging features are powered by the blog plugin.]]></description>
            <content:encoded><![CDATA[<p><a href="https://docusaurus.io/docs/blog">Docusaurus blogging features</a> are powered by the <a href="https://docusaurus.io/docs/api/plugins/@docusaurus/plugin-content-blog">blog plugin</a>.</p><p>Simply add Markdown files (or folders) to the <code>blog</code> directory.</p><p>Regular blog authors can be added to <code>authors.yml</code>.</p><p>The blog post date can be extracted from filenames, such as:</p><ul><li><code>2019-05-30-welcome.md</code></li><li><code>2019-05-30-welcome/index.md</code></li></ul><p>A blog post folder can be convenient to co-locate blog post images:</p><p><img src="./docusaurus-plushie-banner.jpeg" alt="Docusaurus Plushie"/></p><p>The blog supports tags as well!</p><p><strong>And if you don&#x27;t want a blog</strong>: just delete this directory, and use <code>blog: false</code> in your Docusaurus config.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[MDX Blog Post]]></title>
            <link>https://rettersoft.github.io/blog/mdx-blog-post</link>
            <guid>mdx-blog-post</guid>
            <pubDate>Sun, 01 Aug 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Blog posts support Docusaurus Markdown features, such as MDX.]]></description>
            <content:encoded><![CDATA[<p>Blog posts support <a href="https://docusaurus.io/docs/markdown-features">Docusaurus Markdown features</a>, such as <a href="https://mdxjs.com/">MDX</a>.</p><p>:::tip</p><p>Use the power of React to create interactive blog posts.</p><pre><code class="language-js">&lt;button onClick={() =&gt; alert(&#x27;button clicked!&#x27;)}&gt;Click me!&lt;/button&gt;
</code></pre><button>Click me!</button><p>:::</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[First Blog Post]]></title>
            <link>https://rettersoft.github.io/blog/first-blog-post</link>
            <guid>first-blog-post</guid>
            <pubDate>Tue, 28 May 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet]]></description>
            <content:encoded><![CDATA[<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p>]]></content:encoded>
        </item>
    </channel>
</rss>